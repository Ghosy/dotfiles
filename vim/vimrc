""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Title: Vimrc                                                 ""
"" Author: Ghosy                                                ""
"" Source: http://goo.gl/JKMIyI                                 ""
""""Plugins--------- {{{                                        ""
""""--ALE                                                       ""
""""--Buftabs                                                   ""
""""--EasyMotion                                                ""
""""--Eclim                                                     ""
""""--Emmet-Vim                                                 ""
""""--FZF                                                       ""
""""--Indent-Guides
""""--MatchIt                                                   ""
""""--Neomake                                                   ""
""""--Restore_View                                              ""
""""--Solarized (Color Scheme)                                  ""
""""--Surround                                                  ""
""""--TComment                                                  ""
""""--Vim-LaTeX Suite                                           ""
""""--Vundle                                                    ""
""""--YouCompleteMe                                             ""
""""---------------- }}}                                        ""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""Initial-----------------------------------------------------{{{

" Check for vim-plug in autoload
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Installs bundles
Plug 'Lokaltog/vim-easymotion'
Plug 'altercation/vim-colors-solarized'
Plug 'benekastah/neomake', has('nvim') ? {} : { 'on': [] }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mattn/emmet-vim', { 'for': ['html'] }
Plug 'sirver/ultisnips'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/buftabs'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/restore_view.vim'
"""""""YCM Install-----------------------------------------------{{{
" Found on http://www.adamwadeharris.com
function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !./install.py --clang-completer --java-completer
  endif
endfunction
"""""""----------------------------------------------------------}}}
Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'w0rp/ale'
Plug 'nathanaelkane/vim-indent-guides'

call plug#end()

"""""------------------------------------------------------------}}}
"""""Appearance--------------------------------------------------{{{

colorscheme solarized "Sets colorscheme
filetype plugin indent on "Turns on indenting and plugins for specific filetypes
let g:solarized_termcolors=16 "Makes solarized use 16 colors for URxvt compatiblity
if has('syntax')
	syntax enable
	if &term == 'rxvt-unicode'
		set t_Co=16
	endif
endif
set encoding=utf-8
set smartindent "Adds indent levels in some C-like files
set autoindent "Maintains current indent level
set background=dark "Sets the background of the colorscheme to dark
set nu "Sets the line numbers visible
set cmdheight=2 "Sets the space at the bottom of the terminal 2 characters high
set cul " Highlights current line
set showmatch " Shows matching bracket
set list "Makes whitespace characters visible
set listchars=tab:¦\ ,eol:¬,extends:❯,precedes:❮ "Defines characters for whitespace
set hlsearch "Highlights the term searched
set foldtext=MyFoldText() "Sets template for foldtext
set viewoptions=cursor,folds,slash,unix "Saves view info for reloading later
set tabstop=8 "Length TAB's appear to be
set shiftwidth=8 "Width of an indent
set softtabstop=8 "Sets number of columns for a TAB
set colorcolumn=0 "Color column off by default

" Don't highlight special chars
hi SpecialKey ctermbg=none

" Easy motion highlighting colors, which work with solarized
hi link EasyMotionTarget Search
hi link EasyMotionTarget2First Search
hi link EasyMotionTarget2Second Search

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Set display settings for indent guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" Set colors for indent guides
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=black

silent! call ToggleLengthInd()

"""""------------------------------------------------------------}}}
"""""Keybinds----------------------------------------------------{{{

"Maps leader to ,
let mapleader=","
"Easier movement to start of line
map H ^
"Easier movement to end of line
map L $
"Unbinds help from F1
nmap <F1> <nop>
map <F1> <Esc>
imap <F1> <Esc>
"Easier buffer movement
noremap <F3> :bprev<CR>
noremap <F4> :bnext<CR>
"Keeps matching term in the center of the screen
nnoremap n nzzzv
nnoremap N Nzzzv
"Removes matches from screen
nnoremap <leader><space> :noh<CR>:call ClearMatchesCompat()<CR>
"Binds for highlighting words
nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>
"Bind for appending modeline
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
"Toggle X-system for Esperanto
nnoremap <silent> <Leader>x :call ToggleXSystem()<CR>
"Disables the arrow keys in normal and insert mode
"Reenabled arrow keys in insert mode because of arrow location on Ergodox
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>
"Easier Writes
nmap <leader>. :w<CR>
nmap <leader>> :w!<CR>
"Toggles number mode
nmap <leader>n :call NuToggle()<CR>
"Easier quits
nmap <leader>p :q<CR>
nmap <leader>P :q!<CR>
"Toggles spell checker
nmap <leader>s :call SpellToggle()<CR>
"Toggle fold method
nmap <Leader>f :call <SID>ToggleFold()<CR>
nmap <Leader>l :call ToggleColorColumn(80)<CR>

"UltiSnips binds
if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

"""""------------------------------------------------------------}}}
"""""Saving/Backup-----------------------------------------------{{{

set backup
set backupdir=$HOME/.vim/backup "Sets backup directory outside of local directory
set directory=$HOME/.vim/tmp "Sets temp directory outside of local directory
set autoread "Watch for file changes
let g:UltiSnipsSnippetDirectories=["~/.vim/UltiSnips", "UltiSnips"]

"""""------------------------------------------------------------}}}
"""""Other/Unsorted----------------------------------------------{{{

set lazyredraw "Redraw only when it has to
set undolevels=1000 "1000 undos
set ttyfast "Gotta go fast
set foldmethod=marker
set ignorecase "Ignores caps in searches
set smartcase "Pays attention to caps you add only
set clipboard=unnamedplus "Allows for use of the system clipboard in Unix-based systems
set spelllang=en_us
set wildmode=longest,list,full
set wildmenu
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:EclimCompletionMethod = 'omnifunc'
set grepprg=grep\ -nH\ $*
highlight SpellBad cterm=underline ctermbg=196 ctermfg=white

"""""------------------------------------------------------------}}}
"""""Functions---------------------------------------------------{{{
"""""""Clear Matches Compatibility Mode--------------------------{{{
"
" A simple function that keeps certain highlights, while removing all others

function! ClearMatchesCompat()
	silent! call clearmatches()

	" Restore indent guides if enabled
	if g:indent_guides_autocmds_enabled == 1
		silent! call indent_guides#enable()
	endif
endfunction
"""""""----------------------------------------------------------}}}
"""""""Highlight Word--------------------------------------------{{{
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n)
	" Save our location.
	normal! mz
	" Yank the current word into the z register.
	normal! "zyiw
	" Calculate an arbitrary match ID.  Hopefully nothing else is using it.
	let mid = 86750 + a:n
	" Clear existing matches, but don't worry if they don't exist.
	silent! call matchdelete(mid)
	" Construct a literal pattern that has to match at boundaries.
	let pat = '\V\<' . escape(@z, '\') . '\>'
	" Actually match the words.
	call matchadd("InterestingWord" . a:n, pat, 1, mid)
	" Move back to our original location.
	normal! `z
endfunction

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195
"""""""----------------------------------------------------------}}}
"""""""FoldText--------------------------------------------------{{{

function! MyFoldText()
	let line = getline(v:foldstart)
	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart
	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')
	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction 

"""""""----------------------------------------------------------}}}
"""""""Spell Toggle----------------------------------------------{{{

function SpellToggle()
	if &spell == 1
		set nospell
	else
		set spell
	endif
endfunction

"""""""----------------------------------------------------------}}}
"""""""Number Toggle---------------------------------------------{{{

function NuToggle()
	if &rnu == 0
		set rnu " Only changes relative to maintain absolute number on current line.
	else
		set nornu
	endif
endfunction
"""""""----------------------------------------------------------}}}
"""""""Ultisnips Fix---------------------------------------------{{{

" UltiSnips completion function that tries to expand a snippet. If there's no
" snippet for expanding, it checks for completion window and if it's
" shown, selects first element. If there's no completion window it tries to
" jump to next placeholder. If there's no placeholder it just returns TAB key 
function! g:UltiSnips_Complete()
	call UltiSnips#ExpandSnippet()
	if g:ulti_expand_res == 0
		if pumvisible()
			return "\<C-n>"
		else
			call UltiSnips#JumpForwards()
			if g:ulti_jump_forwards_res == 0
				return "\<TAB>"
			endif
		endif
	endif
	return ""
endfunction

function! g:UltiSnips_Reverse()
	call UltiSnips#JumpBackwards()
	if g:ulti_jump_backwards_res == 0
		return "\<C-P>"
	endif

	return ""
endfunction

"""""""----------------------------------------------------------}}}
"""""""Toggle Fold-----------------------------------------------{{{

"Credit to idbrii
"http://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping

function! s:ToggleFold()
	if &foldmethod == 'marker'
		let &l:foldmethod = 'syntax'
	else
		let &l:foldmethod = 'marker'
	endif
	echo 'foldmethod is now ' . &l:foldmethod
endfunction
"""""""----------------------------------------------------------}}}
"""""""Modeline Append-------------------------------------------{{{
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
	let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
		\ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
	let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
	call append(line("$"), l:modeline)
endfunction
"""""""----------------------------------------------------------}}}
"""""""X-System--------------------------------------------------{{{
" Short script to toggle use of the X-system for Esperanto
let g:x_system = 0

function! ToggleXSystem()
	if ! g:x_system
		let g:x_system = 1

		imap cx ĉ
		imap gx ĝ
		imap hx ĥ
		imap jx ĵ
		imap sx ŝ
		imap ux ŭ
		imap Cx Ĉ
		imap Gx Ĝ
		imap Hx Ĥ
		imap Jx Ĵ
		imap Sx Ŝ
		imap Ux Ŭ

		echo 'X-System enabled'
	else
		let g:x_system = 0

		iunmap cx
		iunmap gx
		iunmap hx
		iunmap jx
		iunmap sx
		iunmap ux
		iunmap Cx
		iunmap Gx
		iunmap Hx
		iunmap Jx
		iunmap Sx
		iunmap Ux

		echo 'X-System disabled'
	endif
endfunction
"""""""----------------------------------------------------------}}}
"""""""Toggle 80 Character Indicator-----------------------------{{{
" Toggle character limit guide
function! ToggleColorColumn(limit)
	if ! &colorcolumn
		let &colorcolumn=a:limit
		echo 'ColorColumn enabled (' . &colorcolumn . ')'
	else
		let &colorcolumn=0
		echo 'ColorColumn disabled'
	endif
endfunction
"""""""----------------------------------------------------------}}}
"""""------------------------------------------------------------}}}
